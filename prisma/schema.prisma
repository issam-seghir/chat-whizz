// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  converstionIds String[]       @db.ObjectId
  conversations  Conversation[] @relation(fields: [converstionIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type         String
  provider     String
  providerId   String
  refreshToken String? @db.String
  accessToken  String? @db.String
  expiresAt    Int?
  tokentype    String?
  scoope       String?
  idToken      String? @db.String
  sessionState String? @db.String

  @@unique([provider, providerId])
}

model Conversation {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  isGroup Boolean @default(false)

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  messageIds String[]  @db.ObjectId
  messages   Message[]

  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
}

model Message {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  body  String?
  image String?

  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
